#!/usr/bin/env python3

import gymnasium_robotics as gym
from gymnasium.utils import seeding

import rospy
from utils.gazebo_connection import GazeboConnection, RobotConnection
from utils.controllers_connection import ControllersConnection
from dual_robot_rl.msg import RLExperimentInfo

import utils.log as utils
color_log = utils.TextColors()


class RobotGazeboEnv(object):
    def __init__(self,  
                 controllers_list, 
                 reset_controls,
                 use_gazebo,
                 **kwargs):

        # To reset Simulations
        rospy.logdebug("START init RobotGazeboEnv")
        if use_gazebo:
            self.robot_connection = GazeboConnection(start_init_physics_parameters=True,
                                                     reset_world_or_sim="WORLD", 
                                                     **kwargs)
        else:
            self.robot_connection = RobotConnection(reset_world_or_sim="WORLD")
        self.left_controllers_object = ControllersConnection(
            namespace='/left', controllers_list=controllers_list)
        self.right_controllers_object = ControllersConnection(
            namespace='/right', controllers_list=controllers_list)
        self.reset_controls = reset_controls

        # Set up ROS related variables
        # self.episode_num = 0
        self.step_count = None
        # self.cumulated_episode_reward = 0
        # self.reward_pub = rospy.Publisher('/openai/reward',
        #                                   RLExperimentInfo,
        #                                   queue_size=1)
        
        # self._log_message = None
        

    # Env methods
    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]

    def step(self, action):
        """
        Function executed each time step.
        Here we get the action execute it in a time step and retrieve the
        observations generated by that action.
        :param action:
        :return: obs, reward, done, info
        """
        """
        Here we should convert the action num to movement action, execute the action in the
        simulation and get the observations result of performing that action.
        """
        self._set_action(action)
        obs = self._get_obs()
        obs_norm = self.dictobs2npobs(obs,self.observation_space)
        terminated = self._is_success(obs['achieved_goal'], obs['desired_goal'])
        truncated = True if self.step_count >= self.rl_steps_per_episode else False
        info = {}
        info['is_success'] = self._is_success(obs['achieved_goal'], obs['desired_goal'])
        reward = self.compute_reward(obs['achieved_goal'], obs['desired_goal'], info)

        self.step_count += 1

        return obs_norm, reward, terminated, truncated, info, obs

    def reset(self, seed=None, options=None):
        rospy.logdebug("Reseting RobotGazeboEnvironment")
        # print("Entered reset")
        self._reset_sim()
        self._init_env_variables()
        obs = self._get_obs()
        obs_norm = self.dictobs2npobs(obs,self.observation_space)
        info = {}
        rospy.logdebug("END Reseting RobotGazeboEnvironment")
        return obs_norm, info, obs

    def close(self):
        """
        Function executed when closing the environment.
        Use it for closing GUIS and other systems that need closing.
        :return:
        """
        rospy.logdebug("Closing RobotGazeboEnvironment")
        rospy.signal_shutdown("Closing RobotGazeboEnvironment")

    # Extension methods
    # ----------------------------
    def _reset_sim(self):
        """Resets a simulation
        """
        if self.reset_controls:
            self.robot_connection.unpause()
            self.left_controllers_object.reset_controllers()
            self.right_controllers_object.reset_controllers()
            self._check_all_systems_ready()
            self._set_init_pose()
            self.robot_connection.pause()
            self.robot_connection.reset()
            self.robot_connection.unpause()

        else:
            self.robot_connection.unpause()

            self._check_all_systems_ready()
            self._set_init_pose()
            self.robot_connection.pause()
            self.robot_connection.reset()
            self.robot_connection.unpause()



        return True

    def _set_init_pose(self):
        """Sets the Robot in its init pose
        """
        raise NotImplementedError()

    def _check_all_systems_ready(self):
        """
        Checks that all the sensors, publishers and other simulation systems are
        operational.
        """
        raise NotImplementedError()

    def _get_obs(self):
        """Returns the observation.
        """
        raise NotImplementedError()

    def _init_env_variables(self):
        """Inits variables needed to be initialised each time we reset at the start
        of an episode.
        """
        raise NotImplementedError()

    def _set_action(self, action):      

        """Applies the given action to the simulation.
        """
        raise NotImplementedError()

    def _is_success(self, achieved_goal, desired_goal):
        """Indicates whether or not the episode is done ( the robot has fallen for example).
        """
        raise NotImplementedError()

    def compute_reward(self, observations, done):
        """Calculates the reward to give based on the observations given.
        """
        raise NotImplementedError()

    def _env_setup(self, initial_qpos):
        """Initial configuration of the environment. Can be used to configure initial state
        and extract information from the simulation.
        """
        raise NotImplementedError()
