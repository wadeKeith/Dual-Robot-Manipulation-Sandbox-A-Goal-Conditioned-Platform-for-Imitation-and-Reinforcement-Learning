// Generated by gencpp from file move_demo/SetJointAnglesRequest.msg
// DO NOT EDIT!


#ifndef MOVE_DEMO_MESSAGE_SETJOINTANGLESREQUEST_H
#define MOVE_DEMO_MESSAGE_SETJOINTANGLESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_demo
{
template <class ContainerAllocator>
struct SetJointAnglesRequest_
{
  typedef SetJointAnglesRequest_<ContainerAllocator> Type;

  SetJointAnglesRequest_()
    : elbow_joint(0.0)
    , shoulder_lift_joint(0.0)
    , shoulder_pan_joint(0.0)
    , wrist_1_joint(0.0)
    , wrist_2_joint(0.0)
    , wrist_3_joint(0.0)  {
    }
  SetJointAnglesRequest_(const ContainerAllocator& _alloc)
    : elbow_joint(0.0)
    , shoulder_lift_joint(0.0)
    , shoulder_pan_joint(0.0)
    , wrist_1_joint(0.0)
    , wrist_2_joint(0.0)
    , wrist_3_joint(0.0)  {
  (void)_alloc;
    }



   typedef double _elbow_joint_type;
  _elbow_joint_type elbow_joint;

   typedef double _shoulder_lift_joint_type;
  _shoulder_lift_joint_type shoulder_lift_joint;

   typedef double _shoulder_pan_joint_type;
  _shoulder_pan_joint_type shoulder_pan_joint;

   typedef double _wrist_1_joint_type;
  _wrist_1_joint_type wrist_1_joint;

   typedef double _wrist_2_joint_type;
  _wrist_2_joint_type wrist_2_joint;

   typedef double _wrist_3_joint_type;
  _wrist_3_joint_type wrist_3_joint;





  typedef boost::shared_ptr< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointAnglesRequest_

typedef ::move_demo::SetJointAnglesRequest_<std::allocator<void> > SetJointAnglesRequest;

typedef boost::shared_ptr< ::move_demo::SetJointAnglesRequest > SetJointAnglesRequestPtr;
typedef boost::shared_ptr< ::move_demo::SetJointAnglesRequest const> SetJointAnglesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_demo::SetJointAnglesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_demo::SetJointAnglesRequest_<ContainerAllocator1> & lhs, const ::move_demo::SetJointAnglesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.elbow_joint == rhs.elbow_joint &&
    lhs.shoulder_lift_joint == rhs.shoulder_lift_joint &&
    lhs.shoulder_pan_joint == rhs.shoulder_pan_joint &&
    lhs.wrist_1_joint == rhs.wrist_1_joint &&
    lhs.wrist_2_joint == rhs.wrist_2_joint &&
    lhs.wrist_3_joint == rhs.wrist_3_joint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_demo::SetJointAnglesRequest_<ContainerAllocator1> & lhs, const ::move_demo::SetJointAnglesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a04d423b1f72637454d383a9cff0573";
  }

  static const char* value(const ::move_demo::SetJointAnglesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a04d423b1f72637ULL;
  static const uint64_t static_value2 = 0x454d383a9cff0573ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_demo/SetJointAnglesRequest";
  }

  static const char* value(const ::move_demo::SetJointAnglesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SetJointAngles.srv\n"
"float64 elbow_joint\n"
"float64 shoulder_lift_joint\n"
"float64 shoulder_pan_joint\n"
"float64 wrist_1_joint\n"
"float64 wrist_2_joint\n"
"float64 wrist_3_joint\n"
;
  }

  static const char* value(const ::move_demo::SetJointAnglesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.elbow_joint);
      stream.next(m.shoulder_lift_joint);
      stream.next(m.shoulder_pan_joint);
      stream.next(m.wrist_1_joint);
      stream.next(m.wrist_2_joint);
      stream.next(m.wrist_3_joint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointAnglesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_demo::SetJointAnglesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_demo::SetJointAnglesRequest_<ContainerAllocator>& v)
  {
    s << indent << "elbow_joint: ";
    Printer<double>::stream(s, indent + "  ", v.elbow_joint);
    s << indent << "shoulder_lift_joint: ";
    Printer<double>::stream(s, indent + "  ", v.shoulder_lift_joint);
    s << indent << "shoulder_pan_joint: ";
    Printer<double>::stream(s, indent + "  ", v.shoulder_pan_joint);
    s << indent << "wrist_1_joint: ";
    Printer<double>::stream(s, indent + "  ", v.wrist_1_joint);
    s << indent << "wrist_2_joint: ";
    Printer<double>::stream(s, indent + "  ", v.wrist_2_joint);
    s << indent << "wrist_3_joint: ";
    Printer<double>::stream(s, indent + "  ", v.wrist_3_joint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_DEMO_MESSAGE_SETJOINTANGLESREQUEST_H
